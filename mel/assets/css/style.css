@charset "UTF-8";
/* line 1, src/assets/css/style.scss */
/* line 3, src/mel/assets/css/style.css */
button {
    font: 15px/1 'NanumSquare'; }

/* line 5, src/assets/css/style.scss */
/* line 7, src/mel/assets/css/style.css */
header {
    border-bottom: 1px solid var(--secondaryColor); }

/* line 9, src/assets/css/style.scss */
/* line 11, src/mel/assets/css/style.css */
.logo a {
    font-size: 20px;
    font-family: 'Raleway', sans-serif; }

/* line 14, src/assets/css/style.scss */
/* line 16, src/mel/assets/css/style.css */
.header-admin {
    flex: 0 0 auto;
    width: 90%;
    max-width: 500px;
    margin: 1rem auto;
    border-bottom: 1px solid var(--darkmodeSecondaryColor); }

/* line 22, src/assets/css/style.scss */
/* line 28, src/mel/assets/css/style.css */
.header-admin li {
    flex: 1 1 auto; }

/* line 26, src/assets/css/style.scss */
/* line 36, src/mel/assets/css/style.css */
.header-admin li:first-of-type a {
    border-radius: .2rem 0 0 .2rem; }

/* line 30, src/assets/css/style.scss */
/* line 42, src/mel/assets/css/style.css */
.header-admin li:last-of-type a {
    border-radius: 0 .2rem .2rem 0; }

/* line 34, src/assets/css/style.scss */
/* line 48, src/mel/assets/css/style.css */
.header-admin a {
    padding: .7rem;
    display: flex;
    justify-content: center;
    color: var(--darkmodeTertiaryColor);
    background-color: var(--darkmodeSecondaryColor);
    position: relative; }

/* line 43, src/assets/css/style.scss */
/* line 65, src/mel/assets/css/style.css */
.header-admin a.active {
    color: rgba(255, 255, 255, 0.8);
    background-color: var(--primaryColor); }

/* line 48, src/assets/css/style.scss */
/* line 70, src/mel/assets/css/style.css */
.sort-content {
    flex: 1 1 auto;
    display: flex;
    flex-direction: row-reverse;
    margin: 0 0 .5rem; }

/* line 55, src/assets/css/style.scss */
/* line 91, src/mel/assets/css/style.css */
.sort-content .input-container {
    flex: 0 0 auto;
    flex-direction: row;
    margin-bottom: 0 !important;
    padding: 0;
    display: flex;
    align-items: center;
    position: relative; }

/* line 65, src/assets/css/style.scss */
/* line 119, src/mel/assets/css/style.css */
.sort-content input[type="search"] {
    padding-right: 2.5rem; }

/* line 69, src/assets/css/style.scss */
/* line 123, src/mel/assets/css/style.css */
.sort-content input[type="search"]::-webkit-search-cancel-button {
    display: none; }

/* line 73, src/assets/css/style.scss */
/* line 127, src/mel/assets/css/style.css */
.sort-content .input-container .ico-search {
    position: absolute;
    right: .5rem;
    top: 50%;
    transform: translateY(-50%);
    fill: var(--darkmodeTertiaryColor);
    margin-left: .5rem;
    cursor: pointer; }

/* line 83, src/assets/css/style.scss */
/* line 140, src/mel/assets/css/style.css */
.sort-content .selectbox:not(:last-of-type) {
    margin-right: .5rem; }

/* line 87, src/assets/css/style.scss */
/* line 144, src/mel/assets/css/style.css */
.content + .button-container {
    display: none; }

/* line 91, src/assets/css/style.scss */
/* line 148, src/mel/assets/css/style.css */
.input-container {
    flex: 1 1 25%;
    box-sizing: border-box;
    padding: .5rem; }

/* line 97, src/assets/css/style.scss */
/* line 160, src/mel/assets/css/style.css */
.row-empty {
    justify-content: center; }

/* line 101, src/assets/css/style.scss */
/* line 168, src/mel/assets/css/style.css */
.cell-bed-number {
    width: 10%; }

/* line 105, src/assets/css/style.scss */
/* line 172, src/mel/assets/css/style.css */
.cell-counter {
    width: 10%; }

/* line 109, src/assets/css/style.scss */
/* line 176, src/mel/assets/css/style.css */
.cell-user-number {
    width: 15%; }

/* line 113, src/assets/css/style.scss */
/* line 180, src/mel/assets/css/style.css */
.cell-user-id {
    width: 10%; }

/* line 117, src/assets/css/style.scss */
/* line 184, src/mel/assets/css/style.css */
.cell-user-name {
    width: 10%; }

/* line 121, src/assets/css/style.scss */
/* line 188, src/mel/assets/css/style.css */
.cell-updated-date {
    width: 15%; }

/* line 125, src/assets/css/style.scss */
/* line 192, src/mel/assets/css/style.css */
.cell-ward {
    width: 15%; }

/* line 129, src/assets/css/style.scss */
/* line 196, src/mel/assets/css/style.css */
.cell-event {
    width: 20%;
    flex: 1 1 auto; }

/* line 134, src/assets/css/style.scss */
/* line 205, src/mel/assets/css/style.css */
.cell-activation {
    width: 5%; }

/* line 138, src/assets/css/style.scss */
/* line 209, src/mel/assets/css/style.css */
.svg-check {
    fill: lightseagreen !important; }

/* line 142, src/assets/css/style.scss */
/* line 213, src/mel/assets/css/style.css */
.svg-disabled {
    fill: orangered !important; }

/* line 146, src/assets/css/style.scss */
/* line 217, src/mel/assets/css/style.css */
.cell-activation .activate {
    background: url("../images/check.png") center no-repeat;
    background-size: 24px 24px;
    width: 24px;
    height: 24px; }

/* line 153, src/assets/css/style.scss */
/* line 225, src/mel/assets/css/style.css */
.cell-activation .disabled {
    background: url("../images/disabled.png") center no-repeat;
    background-size: 24px 24px;
    width: 24px;
    height: 24px; }

/* line 160, src/assets/css/style.scss */
/* line 233, src/mel/assets/css/style.css */
fieldset {
    flex: 1 1 auto;
    max-width: 360px;
    margin: 0 .5rem;
    max-height: 60vh;
    overflow: hidden;
    overflow-y: auto; }

/* line 169, src/assets/css/style.scss */
/* line 246, src/mel/assets/css/style.css */
.toggle-feature {
    transform: rotate(0); }

/* line 173, src/assets/css/style.scss */
/* line 253, src/mel/assets/css/style.css */
.toggle-admin .toggle-checkbox:checked + .toggle-button .toggle-feature {
    transform: rotate(90deg); }

/* line 177, src/assets/css/style.scss */
/* line 260, src/mel/assets/css/style.css */
.toggle-activation {
    flex: 1 1 100%;
    flex-direction: row-reverse;
    align-items: center; }

/* line 183, src/assets/css/style.scss */
/* line 280, src/mel/assets/css/style.css */
.toggle-activation .toggle {
    display: flex;
    width: 40px;
    height: 80%; }

/* line 189, src/assets/css/style.scss */
/* line 290, src/mel/assets/css/style.css */
.toggle-activation label {
    flex: 0 0 auto !important;
    margin-right: .5rem; }

/* line 194, src/assets/css/style.scss */
/* line 299, src/mel/assets/css/style.css */
.toggle-activation .toggle-button {
    height: 20px;
    border-radius: 30px;
    flex: 0 0 100% !important;
    background-color: orangered; }

/* line 201, src/assets/css/style.scss */
/* line 312, src/mel/assets/css/style.css */
.toggle-activation .toggle-feature {
    top: -2px;
    left: -2px;
    width: 24px;
    height: 24px;
    background-color: white;
    border-radius: 50%; }

/* line 210, src/assets/css/style.scss */
/* line 323, src/mel/assets/css/style.css */
.toggle-activation .toggle-checkbox:checked + .toggle-button {
    background-color: lightseagreen; }

/* line 214, src/assets/css/style.scss */
/* line 327, src/mel/assets/css/style.css */
.toggle-activation .toggle-checkbox:checked + .toggle-button > * {
    left: 16px; }

/* line 218, src/assets/css/style.scss */
/* line 331, src/mel/assets/css/style.css */
.modal {
    max-width: 360px; }

/* line 222, src/assets/css/style.scss */
/* line 335, src/mel/assets/css/style.css */
.modal .input-container {
    flex-direction: row; }

/* line 226, src/assets/css/style.scss */
/* line 345, src/mel/assets/css/style.css */
.modal input {
    flex: 1 1 auto;
    background-color: #F3F6F9; }

/* line 231, src/assets/css/style.scss */
/* line 354, src/mel/assets/css/style.css */
.modal .input-container-add {
    border-top: 1px solid var(--secondaryColor);
    margin-top: 1rem;
    padding-top: 1rem; }

/* line 237, src/assets/css/style.scss */
/* line 360, src/mel/assets/css/style.css */
.input-container .temp-password {
    display: flex; }

/* line 241, src/assets/css/style.scss */
/* line 368, src/mel/assets/css/style.css */
.temp-password input {
    display: flex;
    flex: 1 1 auto;
    margin-right: .5rem; }

/* line 247, src/assets/css/style.scss */
/* line 382, src/mel/assets/css/style.css */
.content-settings ul {
    flex-direction: column;
    padding: .5rem; }

/* line 252, src/assets/css/style.scss */
/* line 393, src/mel/assets/css/style.css */
.content-settings li {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: .7rem 0;
    border-bottom: 1px solid var(--darkPurple); }

/* line 260, src/assets/css/style.scss */
/* line 413, src/mel/assets/css/style.css */
.content-settings li input {
    flex: 1 1 auto; }

/* line 264, src/assets/css/style.scss */
/* line 421, src/mel/assets/css/style.css */
.content-settings li button {
    padding: 0;
    background-color: transparent !important; }

/* line 269, src/assets/css/style.scss */
/* line 426, src/mel/assets/css/style.css */
.content-settings li svg {
    fill: var(--secondaryColor); }

/* line 273, src/assets/css/style.scss */
/* line 430, src/mel/assets/css/style.css */
.delete-setting {
    padding: 0;
    background-color: transparent !important; }

/* line 278, src/assets/css/style.scss */
/* line 435, src/mel/assets/css/style.css */
.delete-setting svg {
    fill: var(--darkPurple) !important; }

/* line 282, src/assets/css/style.scss */
/* line 439, src/mel/assets/css/style.css */
.modal .delete-setting svg {
    margin-left: .5rem;
    fill: var(--brightGray) !important; }

/* line 287, src/assets/css/style.scss */
/* line 444, src/mel/assets/css/style.css */
.edit-setting svg {
    fill: var(--brightPurple); }

@media screen and (max-width: 1200px) {
    /* line 292, src/assets/css/style.scss */
    /* line 449, src/mel/assets/css/style.css */
    .content {
        padding: 0 1rem; } }

@media screen and (max-width: 768px) {
    /* line 298, src/assets/css/style.scss */
    /* line 454, src/mel/assets/css/style.css */
    header a {
        padding: .6rem .3rem; }
    /* line 301, src/assets/css/style.scss */
    /* line 457, src/mel/assets/css/style.css */
    .header-admin {
        margin: 0 0 1rem; }
    /* line 304, src/assets/css/style.scss */
    /* line 460, src/mel/assets/css/style.css */
    .wrapper, section {
        padding: 0; }
    /* line 308, src/assets/css/style.scss */
    /* line 463, src/mel/assets/css/style.css */
    .content {
        padding: 1rem; }
    /* line 312, src/assets/css/style.scss */
    /* line 466, src/mel/assets/css/style.css */
    .input-container {
        flex: unset;
        padding: 0; }
    /* line 317, src/assets/css/style.scss */
    /* line 474, src/mel/assets/css/style.css */
    .content-view {
        display: block;
        background-color: transparent !important;
        padding: 0 !important; }
    /* line 323, src/assets/css/style.scss */
    /* line 479, src/mel/assets/css/style.css */
    .content .title {
        padding: 1rem 0; }
    /* line 327, src/assets/css/style.scss */
    /* line 482, src/mel/assets/css/style.css */
    .content .title h1 {
        font-size: 1.3rem;
        margin: 0; }
    /* line 333, src/assets/css/style.scss */
    /* line 486, src/mel/assets/css/style.css */
    .content .title .button-container {
        display: none; }
    /* line 337, src/assets/css/style.scss */
    /* line 489, src/mel/assets/css/style.css */
    .content + .button-container {
        display: flex;
        flex: 0 0 auto; }
    /* line 342, src/assets/css/style.scss */
    /* line 501, src/mel/assets/css/style.css */
    .content + .button-container button {
        font-size: 16px;
        flex: 1 1 auto;
        margin: 0;
        border-radius: 0;
        padding: 1.2rem;
        font-weight: bold;
        justify-content: center; }
    /* line 352, src/assets/css/style.scss */
    /* line 520, src/mel/assets/css/style.css */
    .content + .button-container .button-cancel {
        flex: 0 0 40%; }
    /* line 356, src/assets/css/style.scss */
    /* line 527, src/mel/assets/css/style.css */
    fieldset {
        max-width: none;
        margin: 0 0 1rem; }
    /* line 361, src/assets/css/style.scss */
    /* line 531, src/mel/assets/css/style.css */
    .table .row:nth-of-type(2) {
        margin-top: 0; }
    /* line 365, src/assets/css/style.scss */
    /* line 534, src/mel/assets/css/style.css */
    .table .row.th {
        display: none; }
    /* line 369, src/assets/css/style.scss */
    /* line 537, src/mel/assets/css/style.css */
    .table .row {
        min-height: 5rem; }
    /* line 373, src/assets/css/style.scss */
    /* line 540, src/mel/assets/css/style.css */
    .table .row span {
        position: absolute;
        width: auto !important; }
    /* line 378, src/assets/css/style.scss */
    /* line 544, src/mel/assets/css/style.css */
    .cell-counter {
        left: 1rem;
        top: 1rem;
        display: none !important; }
    /* line 384, src/assets/css/style.scss */
    /* line 549, src/mel/assets/css/style.css */
    .cell-bed-number {
        left: 1rem;
        top: 1rem; }
    /* line 389, src/assets/css/style.scss */
    /* line 553, src/mel/assets/css/style.css */
    .cell-bed-number::before {
        content: '침상번호:';
        margin-right: .5rem; }
    /* line 394, src/assets/css/style.scss */
    /* line 557, src/mel/assets/css/style.css */
    .cell-user-id {
        right: 1rem;
        bottom: 2rem; }
    /* line 399, src/assets/css/style.scss */
    /* line 561, src/mel/assets/css/style.css */
    .cell-user-id::before {
        content: 'id:';
        margin-right: .2rem; }
    /* line 404, src/assets/css/style.scss */
    /* line 565, src/mel/assets/css/style.css */
    .cell-user-name {
        left: 1rem;
        top: 1rem; }
    /* line 409, src/assets/css/style.scss */
    /* line 569, src/mel/assets/css/style.css */
    .cell-user-number {
        left: 4rem;
        top: 1rem; }
    /* line 414, src/assets/css/style.scss */
    /* line 573, src/mel/assets/css/style.css */
    .cell-user-number::before {
        content: '('; }
    /* line 418, src/assets/css/style.scss */
    /* line 576, src/mel/assets/css/style.css */
    .cell-user-number::after {
        content: ')'; }
    /* line 422, src/assets/css/style.scss */
    /* line 579, src/mel/assets/css/style.css */
    .cell-updated-date {
        right: 1rem;
        bottom: 1rem; }
    /* line 427, src/assets/css/style.scss */
    /* line 583, src/mel/assets/css/style.css */
    .cell-ward {
        left: 1rem;
        top: 3rem; }
    /* line 432, src/assets/css/style.scss */
    /* line 587, src/mel/assets/css/style.css */
    .cell-event {
        left: 1rem;
        bottom: 1rem; }
    /* line 437, src/assets/css/style.scss */
    /* line 591, src/mel/assets/css/style.css */
    .cell-activation {
        right: 1rem;
        top: 1rem; }
    /* line 442, src/assets/css/style.scss */
    /* line 595, src/mel/assets/css/style.css */
    .content-settings .input-container {
        padding: 0 .5rem; }
    /* line 446, src/assets/css/style.scss */
    /* line 598, src/mel/assets/css/style.css */
    .modal {
        display: flex; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
