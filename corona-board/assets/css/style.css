@charset "UTF-8";
@font-face {
    font-family: 'Teko';
    src: url("../fonts/Teko-Regular.ttf"); }

@font-face {
    font-family: 'Poppins';
    src: url("../fonts/Poppins-Light.ttf"); }

@font-face {
    font-family: 'Ultra';
    src: url("../fonts/Ultra-Regular.ttf"); }

@font-face {
    font-family: 'Montserrat';
    src: url("../fonts/Montserrat-ExtraBold2.ttf"); }

@font-face {
    font-family: 'NanumSquare';
    font-weight: 300;
    src: url(../fonts/NanumSquareR.eot);
    src: url(../fonts/NanumSquareR.eot?#iefix) format("embedded-opentype"), url(../fonts/NanumSquareR.woff) format("woff"), url(../fonts/NanumSquareR.ttf) format("truetype"); }

/* line 38, src/assets/css/common.scss */
/* line 25, src/corona-board/assets/css/style.css */
body {
    color: #333;
    width: 100%;
    overflow-x: hidden;
    text-rendering: optimizeLegibility;
    font: 14px/1.5 'Poppins', 'NanumSquare';
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale; }

/* line 47, src/assets/css/common.scss */
/* line 34, src/corona-board/assets/css/style.css */
body .hide {
    display: none; }

/* line 51, src/assets/css/common.scss */
/* line 37, src/corona-board/assets/css/style.css */
body .tilde {
    display: flex;
    align-items: center;
    margin: 0 .25rem; }

/* line 59, src/assets/css/common.scss */
/* line 43, src/corona-board/assets/css/style.css */
*,
*::after,
*::before {
    box-sizing: border-box;
    margin: 0;
    padding: 0; }

/* line 67, src/assets/css/common.scss */
/* line 51, src/corona-board/assets/css/style.css */
svg {
    fill: #27292d; }

/* line 71, src/assets/css/common.scss */
/* line 55, src/corona-board/assets/css/style.css */
canvas {
    opacity: .5;
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
    pointer-events: none; }

/* Page Loader */
/* line 81, src/assets/css/common.scss */
/* line 65, src/corona-board/assets/css/style.css */
.js .loading::before,
.js .loading::after {
    content: '';
    position: fixed;
    z-index: 1000; }

/* line 88, src/assets/css/common.scss */
/* line 72, src/corona-board/assets/css/style.css */
.js .loading::before {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #dce2ec; }

/* line 96, src/assets/css/common.scss */
/* line 80, src/corona-board/assets/css/style.css */
.js .loading::after {
    top: 50%;
    left: 50%;
    width: 60px;
    height: 60px;
    margin: -30px 0 0 -30px;
    border-radius: 50%;
    opacity: 0.4;
    background: #444;
    -webkit-animation: loaderAnim 0.7s linear infinite alternate forwards;
    animation: loaderAnim 0.7s linear infinite alternate forwards; }

@-webkit-keyframes loaderAnim {
    to {
        opacity: 1;
        transform: scale3d(0.5, 0.5, 1); } }

@keyframes loaderAnim {
    to {
        opacity: 1;
        transform: scale3d(0.5, 0.5, 1); } }

/* line 116, src/assets/css/common.scss */
/* line 103, src/corona-board/assets/css/style.css */
a {
    text-decoration: none;
    color: #444;
    outline: none; }

/* line 122, src/assets/css/common.scss */
/* line 109, src/corona-board/assets/css/style.css */
a:hover,
a:focus {
    color: #555;
    outline: none;
    text-decoration: none; }

/* line 129, src/assets/css/common.scss */
/* line 116, src/corona-board/assets/css/style.css */
.js-image {
    max-width: 100%;
    display: block; }

/* line 134, src/assets/css/common.scss */
/* line 121, src/corona-board/assets/css/style.css */
.loaded .js-image {
    opacity: 0; }

/* line 139, src/assets/css/common.scss */
/* line 125, src/corona-board/assets/css/style.css */
.container {
    padding: 0;
    /* bootstrap */
    width: 100%;
    height: 100vh;
    height: calc(var(--vh, 1vh) * 100);
    display: flex; }

/* line 147, src/assets/css/common.scss */
/* line 134, src/corona-board/assets/css/style.css */
section {
    position: relative; }

/* line 151, src/assets/css/common.scss */
/* line 138, src/corona-board/assets/css/style.css */
ul {
    margin: 0;
    padding: 0;
    list-style: none;
    display: flex; }

/* line 158, src/assets/css/common.scss */
/* line 145, src/corona-board/assets/css/style.css */
img {
    display: block;
    width: 100%; }

/* line 163, src/assets/css/common.scss */
/* line 150, src/corona-board/assets/css/style.css */
.add-input {
    width: 100%;
    margin: 0 auto; }

/* line 168, src/assets/css/common.scss */
/* line 155, src/corona-board/assets/css/style.css */
h1, h2, h3, h4, h5, p {
    margin: 0;
    line-height: 1.2; }

/* line 173, src/assets/css/common.scss */
/* line 160, src/corona-board/assets/css/style.css */
small {
    font-family: 'Comfortaa', 'NanumSquare', sans-serif;
    line-height: 1.2; }

/* line 178, src/assets/css/common.scss */
/* line 165, src/corona-board/assets/css/style.css */
.active,
.active-sub-menu {
    opacity: 1 !important;
    visibility: visible !important;
    display: flex !important; }

/* line 185, src/assets/css/common.scss */
/* line 172, src/corona-board/assets/css/style.css */
fieldset {
    border-radius: .5rem;
    border: 1px solid #DDD; }

/* line 193, src/assets/css/common.scss */
/* line 177, src/corona-board/assets/css/style.css */
input {
    -webkit-appearance: none;
    height: auto;
    border: 0;
    padding: .5rem .25rem;
    font: 14px/1 'NanumSquare';
    background-color: white;
    outline: 0;
    box-sizing: border-box;
    border-radius: .25rem;
    position: relative;
    /* Chrome, Safari, Edge, Opera */
    /* Firefox */ }

/* line 205, src/assets/css/common.scss */
/* line 191, src/corona-board/assets/css/style.css */
input:focus {
    box-shadow: 0 0 1px 1px #3b9cff; }

/* line 209, src/assets/css/common.scss */
/* line 194, src/corona-board/assets/css/style.css */
input:disabled {
    background-color: rgba(0, 0, 0, 0.1); }

/* line 214, src/assets/css/common.scss */
/* line 197, src/corona-board/assets/css/style.css */
input::-webkit-outer-spin-button, input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0; }

/* line 221, src/assets/css/common.scss */
/* line 201, src/corona-board/assets/css/style.css */
input[type=number] {
    -moz-appearance: textfield; }

/* line 225, src/assets/css/common.scss */
/* line 204, src/corona-board/assets/css/style.css */
input[type="password"] {
    font-family: "Comfortaa", sans-serif; }

/* line 231, src/assets/css/common.scss */
/* line 208, src/corona-board/assets/css/style.css */
input:focus, select:focus, button:focus {
    outline: 0; }

/* line 235, src/assets/css/common.scss */
/* line 212, src/corona-board/assets/css/style.css */
label {
    font-weight: normal;
    /* bootstrap*/
    margin-bottom: 0;
    /* bootstrap*/
    color: slategray; }

/* line 241, src/assets/css/common.scss */
/* line 220, src/corona-board/assets/css/style.css */
button {
    display: flex;
    align-items: center;
    border: 0;
    background: #07babd;
    color: white;
    border-radius: .3rem;
    padding: .5rem 1rem;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none; }

/* line 252, src/assets/css/common.scss */
/* line 234, src/corona-board/assets/css/style.css */
button svg + span {
    margin-left: .2rem; }

/* line 257, src/assets/css/common.scss */
/* line 238, src/corona-board/assets/css/style.css */
.btn-submit {
    background-color: #07babd !important;
    border: 0 !important; }

/* line 262, src/assets/css/common.scss */
/* line 243, src/corona-board/assets/css/style.css */
.btn-cancel {
    background-color: rgba(0, 0, 0, 0.1); }

/* line 266, src/assets/css/common.scss */
/* line 247, src/corona-board/assets/css/style.css */
.btn-modify {
    background-color: #3b9cff;
    color: #333;
    width: 2rem;
    height: 2rem;
    padding: 0; }

/* line 274, src/assets/css/common.scss */
/* line 255, src/corona-board/assets/css/style.css */
.btn-download {
    background-color: lightslategray !important; }

/* line 278, src/assets/css/common.scss */
/* line 259, src/corona-board/assets/css/style.css */
textarea {
    background-color: white;
    border: none;
    border-radius: .5rem;
    padding: .5rem;
    resize: none; }

/* line 285, src/assets/css/common.scss */
/* line 266, src/corona-board/assets/css/style.css */
textarea:focus {
    outline: 0; }

/* line 290, src/assets/css/common.scss */
/* line 270, src/corona-board/assets/css/style.css */
header {
    flex: 0 0 auto;
    display: flex;
    align-content: center;
    justify-content: space-between;
    box-sizing: border-box; }

/* line 297, src/assets/css/common.scss */
/* line 277, src/corona-board/assets/css/style.css */
header a {
    display: flex;
    padding: .4rem .8rem; }

/* line 302, src/assets/css/common.scss */
/* line 281, src/corona-board/assets/css/style.css */
header .logo {
    line-height: 1; }

/* line 306, src/assets/css/common.scss */
/* line 284, src/corona-board/assets/css/style.css */
header .menu {
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    display: flex;
    align-items: center;
    cursor: pointer; }

/* line 312, src/assets/css/common.scss */
/* line 293, src/corona-board/assets/css/style.css */
header .menu a {
    font-size: 13px; }

/* line 317, src/assets/css/common.scss */
/* line 296, src/corona-board/assets/css/style.css */
header button {
    padding: .5rem 2rem; }

/* line 322, src/assets/css/common.scss */
/* line 300, src/corona-board/assets/css/style.css */
.container > header {
    padding: 0 1rem; }

/* line 326, src/assets/css/common.scss */
/* line 304, src/corona-board/assets/css/style.css */
main {
    flex: 1 1 auto;
    display: flex; }

/* line 331, src/assets/css/common.scss */
/* line 309, src/corona-board/assets/css/style.css */
aside {
    flex-grow: 0;
    flex-shrink: 0;
    flex-direction: column;
    transition: .0s; }

/* line 337, src/assets/css/common.scss */
/* line 315, src/corona-board/assets/css/style.css */
aside ul {
    flex-direction: column; }

/* line 340, src/assets/css/common.scss */
/* line 318, src/corona-board/assets/css/style.css */
aside ul li {
    flex: 1 1 auto; }

/* line 346, src/assets/css/common.scss */
/* line 322, src/corona-board/assets/css/style.css */
.flex-wrapper {
    display: flex; }

/* line 350, src/assets/css/common.scss */
/* line 326, src/corona-board/assets/css/style.css */
.content {
    opacity: 0;
    flex: 1 1 auto;
    align-items: center;
    overflow-x: hidden;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    -webkit-animation: fadeInOpacity .4s forwards;
    animation: fadeInOpacity .4s forwards;
    transition: .2s border-color; }

/* line 362, src/assets/css/common.scss */
/* line 339, src/corona-board/assets/css/style.css */
.content-title {
    flex: 0 0 auto;
    padding: 0 1rem;
    width: 100%;
    box-sizing: border-box;
    display: flex;
    justify-content: space-between;
    align-items: center; }

/* line 371, src/assets/css/common.scss */
/* line 348, src/corona-board/assets/css/style.css */
.content-title h1 {
    font: normal 2rem/1 'Nanumsquare';
    flex: 1 1 auto; }

/* line 377, src/assets/css/common.scss */
/* line 353, src/corona-board/assets/css/style.css */
.content .title p {
    color: #5e5c67;
    font-size: 16px; }

/* line 382, src/assets/css/common.scss */
/* line 358, src/corona-board/assets/css/style.css */
.content-view {
    flex: 0 1 auto;
    padding: 1rem;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    max-width: 1200px;
    width: 100%;
    position: relative; }

/* line 393, src/assets/css/common.scss */
/* line 369, src/corona-board/assets/css/style.css */
.content-title + .content-view {
    padding: 0 1rem 1rem 1rem; }

/* line 397, src/assets/css/common.scss */
/* line 373, src/corona-board/assets/css/style.css */
.wrapper {
    flex: 1 1 auto;
    padding: 2rem;
    margin: 0 auto;
    max-width: 1200px;
    display: flex;
    flex-direction: column;
    box-sizing: border-box; }

/* line 407, src/assets/css/common.scss */
/* line 383, src/corona-board/assets/css/style.css */
.input-container {
    display: flex;
    align-content: center;
    margin-bottom: 1rem;
    position: relative; }

/* line 413, src/assets/css/common.scss */
/* line 389, src/corona-board/assets/css/style.css */
.input-container label {
    align-self: center; }

/* line 417, src/assets/css/common.scss */
/* line 392, src/corona-board/assets/css/style.css */
.input-container input {
    flex: 1 1 auto; }

/* line 421, src/assets/css/common.scss */
/* line 395, src/corona-board/assets/css/style.css */
.input-container div {
    display: flex;
    align-items: center; }

/* line 425, src/assets/css/common.scss */
/* line 399, src/corona-board/assets/css/style.css */
.input-container div input {
    flex: 1 1 auto; }

/* line 431, src/assets/css/common.scss */
/* line 403, src/corona-board/assets/css/style.css */
.buttons {
    display: flex; }

/* line 434, src/assets/css/common.scss */
/* line 406, src/corona-board/assets/css/style.css */
.buttons button {
    margin-left: .5rem; }

/* Progress */
/* line 441, src/assets/css/common.scss */
/* line 411, src/corona-board/assets/css/style.css */
.progress-wrap {
    position: fixed;
    right: 50px;
    bottom: 50px;
    height: 46px;
    width: 46px;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-content: center;
    border-radius: 50px;
    z-index: 10000;
    opacity: 0;
    visibility: hidden;
    background-color: lightsteelblue;
    transform: translateY(15px);
    transition: all 200ms linear; }

/* line 461, src/assets/css/common.scss */
/* line 430, src/corona-board/assets/css/style.css */
.progress-wrap.active-progress {
    opacity: 1;
    visibility: visible;
    transform: translateY(0); }

/* line 467, src/assets/css/common.scss */
/* line 436, src/corona-board/assets/css/style.css */
.progress-wrap svg.progress-circle path {
    stroke: white;
    stroke-width: 4;
    box-sizing: border-box;
    transition: all 200ms linear; }

/* line 475, src/assets/css/common.scss */
/* line 443, src/corona-board/assets/css/style.css */
.progress-wrap svg {
    fill: white;
    align-self: center; }

/* Pagination */
/* line 483, src/assets/css/common.scss */
/* line 449, src/corona-board/assets/css/style.css */
.pagination {
    margin: 2rem auto; }

/* line 488, src/assets/css/common.scss */
/* line 453, src/corona-board/assets/css/style.css */
.pagination ul {
    display: flex; }

/* line 492, src/assets/css/common.scss */
/* line 457, src/corona-board/assets/css/style.css */
.pagination li {
    margin: 0 1rem;
    color: slategray;
    display: flex;
    align-items: center; }

/* line 499, src/assets/css/common.scss */
/* line 464, src/corona-board/assets/css/style.css */
.pagination .active {
    color: #36299f;
    font-weight: bold; }

/* line 504, src/assets/css/common.scss */
/* line 469, src/corona-board/assets/css/style.css */
.pagination svg {
    fill: slategray; }

/* ,Checkbox */
/* line 510, src/assets/css/common.scss */
/* line 474, src/corona-board/assets/css/style.css */
.checkbox {
    position: relative; }

/* line 513, src/assets/css/common.scss */
/* line 477, src/corona-board/assets/css/style.css */
.checkbox input {
    position: absolute;
    opacity: 0; }

/* line 517, src/assets/css/common.scss */
/* line 481, src/corona-board/assets/css/style.css */
.checkbox input:checked + label {
    color: #36299f; }

/* line 522, src/assets/css/common.scss */
/* line 484, src/corona-board/assets/css/style.css */
.checkbox label {
    flex: 1 1 auto !important;
    color: #AAA;
    display: flex;
    align-items: center;
    position: relative;
    cursor: pointer;
    padding: 0;
    transition: .2s color; }

/* line 532, src/assets/css/common.scss */
/* line 494, src/corona-board/assets/css/style.css */
.checkbox label::before {
    border-radius: 2px;
    transition: .2s;
    content: '';
    margin-right: 3px;
    width: 15px;
    height: 15px;
    border: 1px solid #EEE;
    background-color: white; }

/* line 545, src/assets/css/common.scss */
/* line 505, src/corona-board/assets/css/style.css */
.checkbox input:checked + label:after {
    content: '';
    width: 10px;
    height: 6px;
    position: absolute;
    top: 3px;
    left: 3px;
    border: 2px solid black;
    border-top: none;
    border-right: none;
    background: transparent;
    opacity: 1;
    transform: rotate(-45deg); }

/* Radio Button */
/* line 563, src/assets/css/common.scss */
/* line 521, src/corona-board/assets/css/style.css */
input[type="radio"] {
    position: absolute;
    opacity: 0; }

/* line 568, src/assets/css/common.scss */
/* line 526, src/corona-board/assets/css/style.css */
input[type="radio"] + label {
    cursor: pointer;
    margin-right: 1rem; }

/* line 573, src/assets/css/common.scss */
/* line 531, src/corona-board/assets/css/style.css */
input[type="radio"] + label:before {
    content: '';
    background: #F3F6F9;
    border-radius: 100%;
    border: 1px solid #E3E6E9;
    display: inline-block;
    width: 12px;
    height: 12px;
    position: relative;
    margin-right: 3px;
    vertical-align: middle;
    transition: all .2s ease; }

/* line 587, src/assets/css/common.scss */
/* line 545, src/corona-board/assets/css/style.css */
input[type="radio"]:hover + label:before, input[type="radio"]:checked + label:before {
    border-color: #07babd !important;
    background-color: #07babd !important;
    box-shadow: inset 0 0 0 2px #DDD; }

/* line 593, src/assets/css/common.scss */
/* line 551, src/corona-board/assets/css/style.css */
input[type="radio"]:focus + label:before {
    outline: none; }

/* line 597, src/assets/css/common.scss */
/* line 555, src/corona-board/assets/css/style.css */
input[type="radio"]:disabled + label {
    cursor: auto; }

/* line 601, src/assets/css/common.scss */
/* line 559, src/corona-board/assets/css/style.css */
input[type="radio"]:disabled:checked + label:before {
    box-shadow: inset 0 0 0 2px #f4f4f4;
    border-color: #b4b4b4;
    background: #b4b4b4; }

/* line 607, src/assets/css/common.scss */
/* line 565, src/corona-board/assets/css/style.css */
input[type="radio"]:disabled + label:before {
    border-color: #b4b4b4;
    background: #f4f4f4; }

/* line 612, src/assets/css/common.scss */
/* line 570, src/corona-board/assets/css/style.css */
input[type="radio"] + label:empty:before {
    margin-right: 0; }

/* line 616, src/assets/css/common.scss */
/* line 574, src/corona-board/assets/css/style.css */
.input-comment {
    flex: 1 1 100% !important; }

/*selectbox*/
/* line 622, src/assets/css/common.scss */
/* line 579, src/corona-board/assets/css/style.css */
.selectbox {
    position: relative;
    box-sizing: border-box;
    align-items: center;
    display: flex; }

/* line 628, src/assets/css/common.scss */
/* line 585, src/corona-board/assets/css/style.css */
.selectbox::-ms-expand {
    display: none; }

/* line 632, src/assets/css/common.scss */
/* line 588, src/corona-board/assets/css/style.css */
.selectbox::before {
    content: "";
    position: absolute;
    top: 50%;
    right: .7rem;
    width: 0;
    height: 0;
    margin-top: -6px;
    border: solid black;
    border-width: 0 1px 1px 0;
    display: inline-block;
    padding: 3px;
    transform: rotate(45deg);
    -webkit-transform: rotate(45deg); }

/* line 648, src/assets/css/common.scss */
/* line 603, src/corona-board/assets/css/style.css */
.selectbox label {
    white-space: nowrap;
    margin-right: .5rem; }

/* line 653, src/assets/css/common.scss */
/* line 607, src/corona-board/assets/css/style.css */
.selectbox select {
    border: 1px solid #EEE;
    border-radius: .3rem;
    display: flex;
    flex: 1 1 auto;
    width: 100%;
    -webkit-appearance: none;
    padding: .25rem 1.25rem .25rem .25rem;
    height: auto;
    font: 14px/1 'NanumSquare';
    background-color: white;
    outline: 0;
    box-sizing: border-box;
    cursor: pointer; }

/*table*/
/* line 672, src/assets/css/common.scss */
/* line 624, src/corona-board/assets/css/style.css */
.table {
    width: 100%;
    margin: 0 auto 1rem; }

/* line 677, src/assets/css/common.scss */
/* line 629, src/corona-board/assets/css/style.css */
.table button {
    display: flex;
    justify-content: center;
    align-items: center;
    border: 0;
    background: #EEE;
    color: white;
    border-radius: .2rem;
    padding: .25rem .5rem;
    margin: 0 .25rem;
    cursor: pointer; }

/* line 690, src/assets/css/common.scss */
/* line 642, src/corona-board/assets/css/style.css */
.table .row {
    flex: 1 1 auto;
    display: flex;
    align-items: center;
    text-align: center;
    padding: .5rem 0;
    background: white;
    border-radius: .5rem;
    position: relative;
    -webkit-animation: fadeInOpacity .8s forwards;
    animation: fadeInOpacity .8s forwards; }

/* line 702, src/assets/css/common.scss */
/* line 655, src/corona-board/assets/css/style.css */
.table .row li {
    flex: 1 1 auto;
    display: flex;
    justify-content: center;
    margin: 0 .25rem; }

/* line 709, src/assets/css/common.scss */
/* line 662, src/corona-board/assets/css/style.css */
.table .row span {
    color: #5e5c67;
    align-items: center;
    display: flex;
    justify-content: center; }

/* line 716, src/assets/css/common.scss */
/* line 669, src/corona-board/assets/css/style.css */
.table .th {
    font: 13px/1.2 'Comfortaa', 'Nanumsquare';
    margin: .5rem auto .2rem !important;
    color: slategray !important;
    word-break: keep-all;
    border-radius: 0;
    background: transparent !important;
    padding: 0;
    cursor: default; }

/* line 730, src/assets/css/common.scss */
/* line 680, src/corona-board/assets/css/style.css */
.table .list {
    height: 100%;
    overflow-y: auto; }

/* =====================================================
   Toggle buttons
   ===================================================== */
/* line 739, src/assets/css/common.scss */
/* line 688, src/corona-board/assets/css/style.css */
.toggle {
    display: block;
    text-align: center;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none; }

/* line 745, src/assets/css/common.scss */
/* line 697, src/corona-board/assets/css/style.css */
.toggle-checkbox {
    display: none; }

/* line 749, src/assets/css/common.scss */
/* line 701, src/corona-board/assets/css/style.css */
.toggle-button {
    display: block;
    background-color: #E3E6E9;
    margin: 0 auto;
    font-size: 1.4em;
    transition: .2s; }

/* line 757, src/assets/css/common.scss */
/* line 709, src/corona-board/assets/css/style.css */
.toggle-button:hover {
    cursor: pointer; }

/* line 761, src/assets/css/common.scss */
/* line 713, src/corona-board/assets/css/style.css */
.toggle .toggle-button {
    position: relative;
    height: 22px;
    width: 36px;
    border-radius: 25px; }

/* line 768, src/assets/css/common.scss */
/* line 720, src/corona-board/assets/css/style.css */
.toggle .toggle-feature {
    display: block;
    position: absolute;
    top: 3px;
    left: 3px;
    fill: white;
    border-radius: 50%;
    transition: .2s; }

/* line 778, src/assets/css/common.scss */
/* line 730, src/corona-board/assets/css/style.css */
.toggle .toggle-checkbox:checked + .toggle-button {
    background-color: #3b9cff;
    fill: white; }

/* line 783, src/assets/css/common.scss */
/* line 735, src/corona-board/assets/css/style.css */
.toggle .toggle-checkbox:checked + .toggle-button > * {
    left: 16px; }

/* Toggle Checkbox */
/* line 789, src/assets/css/common.scss */
/* line 740, src/corona-board/assets/css/style.css */
.toggle-activation {
    flex: 1 1 100%;
    flex-direction: row-reverse;
    align-items: center; }

/* line 795, src/assets/css/common.scss */
/* line 746, src/corona-board/assets/css/style.css */
.toggle-activation .toggle {
    display: flex;
    width: 40px;
    height: 80%; }

/* line 801, src/assets/css/common.scss */
/* line 752, src/corona-board/assets/css/style.css */
.toggle-activation label {
    flex: 0 0 auto !important;
    margin-right: .5rem; }

/* line 806, src/assets/css/common.scss */
/* line 757, src/corona-board/assets/css/style.css */
.toggle-activation .toggle-button {
    height: 20px;
    border-radius: 30px;
    flex: 0 0 100% !important;
    background-color: orangered; }

/* line 813, src/assets/css/common.scss */
/* line 764, src/corona-board/assets/css/style.css */
.toggle-activation .toggle-feature {
    top: -2px;
    left: -2px;
    width: 24px;
    height: 24px;
    background-color: white;
    border-radius: 50%; }

/* line 822, src/assets/css/common.scss */
/* line 773, src/corona-board/assets/css/style.css */
.toggle-activation .toggle-checkbox:checked + .toggle-button {
    background-color: lightseagreen; }

/* line 826, src/assets/css/common.scss */
/* line 777, src/corona-board/assets/css/style.css */
.toggle-activation .toggle-checkbox:checked + .toggle-button > * {
    left: 16px; }

/* =====================================================
   Modal Effect
   ===================================================== */
/* line 834, src/assets/css/common.scss */
/* line 784, src/corona-board/assets/css/style.css */
.modal {
    opacity: 0;
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    flex-direction: column;
    border-radius: .5rem;
    box-sizing: border-box;
    overflow-x: hidden;
    overflow-y: auto;
    cursor: default;
    transition: .25s;
    z-index: 10; }

/* line 852, src/assets/css/common.scss */
/* line 802, src/corona-board/assets/css/style.css */
.modal {
    width: 50vw;
    height: 50vh;
    max-height: 60%;
    overflow-y: auto; }

/* line 858, src/assets/css/common.scss */
/* line 808, src/corona-board/assets/css/style.css */
.modal .close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    cursor: pointer; }

/* line 865, src/assets/css/common.scss */
/* line 814, src/corona-board/assets/css/style.css */
.modal header {
    flex: 0 0 auto;
    flex-direction: column !important; }

/* line 870, src/assets/css/common.scss */
/* line 818, src/corona-board/assets/css/style.css */
.modal .title {
    padding: 1rem;
    display: flex;
    justify-content: space-between; }

/* line 876, src/assets/css/common.scss */
/* line 823, src/corona-board/assets/css/style.css */
.modal .row {
    padding: 0; }

/* line 880, src/assets/css/common.scss */
/* line 826, src/corona-board/assets/css/style.css */
.modal .modal-content {
    flex-direction: column; }

/* line 884, src/assets/css/common.scss */
/* line 829, src/corona-board/assets/css/style.css */
.modal section {
    padding: 0 1rem 1rem 1rem;
    flex: 1 1 auto;
    overflow-y: auto; }

/* line 891, src/assets/css/common.scss */
/* line 835, src/corona-board/assets/css/style.css */
.overlay {
    display: flex;
    justify-content: center;
    align-items: center;
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.5);
    visibility: hidden;
    opacity: 0;
    z-index: 5;
    transition: opacity .4s; }

@media screen and (max-width: 768px) {
    /* line 908, src/assets/css/common.scss */
    /* line 852, src/corona-board/assets/css/style.css */
    .modal {
        padding: 1rem;
        width: 90vw; } }

/* Scrollbar */
/* line 915, src/assets/css/common.scss */
/* line 858, src/corona-board/assets/css/style.css */
::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
    border-radius: 6px;
    background-color: #eee; }

/* line 921, src/assets/css/common.scss */
/* line 864, src/corona-board/assets/css/style.css */
::-webkit-scrollbar {
    width: 6px;
    height: 6px;
    background-color: #eee; }

/* line 927, src/assets/css/common.scss */
/* line 870, src/corona-board/assets/css/style.css */
::-webkit-scrollbar-thumb {
    border-radius: 6px;
    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
    background-color: #a3a6a9; }

@-webkit-keyframes fadeInOpacity {
    0% {
        opacity: 0; }
    100% {
        opacity: 1; } }

@keyframes fadeInOpacity {
    0% {
        opacity: 0; }
    100% {
        opacity: 1; } }

/* ============================================================
   Date Picker
   ============================================================ */
/* line 947, src/assets/css/common.scss */
/* line 891, src/corona-board/assets/css/style.css */
.ui-datepicker {
    background-color: white;
    padding: 1rem;
    box-shadow: 0 0 14px rgba(0, 0, 0, 0.1);
    border-radius: .5rem; }

/* line 954, src/assets/css/common.scss */
/* line 898, src/corona-board/assets/css/style.css */
.ui-icon {
    display: none; }

/* line 958, src/assets/css/common.scss */
/* line 902, src/corona-board/assets/css/style.css */
.ui-datepicker-header {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: .5rem; }

/* line 965, src/assets/css/common.scss */
/* line 909, src/corona-board/assets/css/style.css */
.ui-datepicker .ui-datepicker-title {
    display: flex; }

/* line 969, src/assets/css/common.scss */
/* line 913, src/corona-board/assets/css/style.css */
.ui-datepicker .ui-datepicker-title select {
    min-width: 80px;
    margin: 0 .25rem;
    -webkit-appearance: auto;
    -moz-appearance: auto;
    appearance: auto;
    padding-right: 0; }

/* line 976, src/assets/css/common.scss */
/* line 922, src/corona-board/assets/css/style.css */
.ui-datepicker .ui-datepicker-prev,
.ui-datepicker .ui-datepicker-next {
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 1rem;
    height: 1rem;
    border-radius: .2rem;
    transition: background-color .2s;
    cursor: pointer; }

/* line 989, src/assets/css/common.scss */
/* line 935, src/corona-board/assets/css/style.css */
.ui-datepicker .ui-datepicker-prev {
    left: 1rem; }

/* line 993, src/assets/css/common.scss */
/* line 939, src/corona-board/assets/css/style.css */
.ui-datepicker .ui-datepicker-prev::before {
    content: "<";
    line-height: 10px; }

/* line 998, src/assets/css/common.scss */
/* line 944, src/corona-board/assets/css/style.css */
.ui-datepicker .ui-datepicker-next {
    right: 1rem; }

/* line 1002, src/assets/css/common.scss */
/* line 948, src/corona-board/assets/css/style.css */
.ui-datepicker .ui-datepicker-next::before {
    content: ">";
    line-height: 10px; }

/* line 1007, src/assets/css/common.scss */
/* line 953, src/corona-board/assets/css/style.css */
.ui-state-default {
    border: 0 !important;
    background-color: transparent;
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color .2s; }

/* line 1019, src/assets/css/common.scss */
/* line 965, src/corona-board/assets/css/style.css */
.ui-state-active {
    background-color: #07babd;
    color: white !important; }

/* line 1024, src/assets/css/common.scss */
/* line 970, src/corona-board/assets/css/style.css */
.ui-state-hover {
    background-color: #3b9cff;
    color: white !important; }

/* =====================================================
   Dark mode
   ===================================================== */
/* line 1033, src/assets/css/common.scss */
/* line 978, src/corona-board/assets/css/style.css */
.dark-mode,
.dark-mode main {
    background-color: #27292d !important;
    color: white; }

/* line 1039, src/assets/css/common.scss */
/* line 984, src/corona-board/assets/css/style.css */
.dark-mode a {
    color: white; }

/* line 1043, src/assets/css/common.scss */
/* line 988, src/corona-board/assets/css/style.css */
.dark-mode .button-cancel {
    background-color: #85899a;
    color: white; }

/* line 1048, src/assets/css/common.scss */
/* line 993, src/corona-board/assets/css/style.css */
.dark-mode p, .dark-mode label {
    color: #d0d3dc !important; }

/* line 1052, src/assets/css/common.scss */
/* line 997, src/corona-board/assets/css/style.css */
.dark-mode input, .dark-mode select {
    background-color: #484c5a !important;
    color: white; }

/* line 1057, src/assets/css/common.scss */
/* line 1002, src/corona-board/assets/css/style.css */
.dark-mode .selectbox::before {
    border: solid #3b9cff;
    border-width: 0 1px 1px 0; }

/* line 1062, src/assets/css/common.scss */
/* line 1007, src/corona-board/assets/css/style.css */
.dark-mode header {
    border-color: #373a46 !important; }

/* line 1066, src/assets/css/common.scss */
/* line 1011, src/corona-board/assets/css/style.css */
.dark-mode aside {
    background-color: #27292d !important; }

/* line 1070, src/assets/css/common.scss */
/* line 1015, src/corona-board/assets/css/style.css */
.dark-mode .menu {
    background-color: #27292d;
    color: white;
    border-color: #393b40; }

/* line 1076, src/assets/css/common.scss */
/* line 1021, src/corona-board/assets/css/style.css */
.dark-mode .menu a {
    color: #ccc;
    transition: .2s color; }

/* line 1081, src/assets/css/common.scss */
/* line 1026, src/corona-board/assets/css/style.css */
.dark-mode .content {
    background: #373a46 !important; }

/* line 1088, src/assets/css/common.scss */
/* line 1030, src/corona-board/assets/css/style.css */
.dark-mode svg {
    fill: rgba(255, 255, 255, 0.3); }

/* line 1092, src/assets/css/common.scss */
/* line 1034, src/corona-board/assets/css/style.css */
.dark-mode .table .row {
    background-color: #373a46; }

/* line 1096, src/assets/css/common.scss */
/* line 1038, src/corona-board/assets/css/style.css */
.dark-mode .table .row span {
    color: #d0d3dc; }

/* line 1100, src/assets/css/common.scss */
/* line 1042, src/corona-board/assets/css/style.css */
.dark-mode input[type="radio"] + label:before {
    background-color: #373a46;
    border-color: #27292d; }

/* line 1105, src/assets/css/common.scss */
/* line 1047, src/corona-board/assets/css/style.css */
.dark-mode input[type="radio"]:hover + label:before, .dark-mode input[type="radio"]:checked + label:before {
    box-shadow: inset 0 0 0 2px #27292d; }

/* line 3, src/assets/css/style.scss */
/* line 1051, src/corona-board/assets/css/style.css */
body {
    overflow: hidden; }

/* line 7, src/assets/css/style.scss */
/* line 1055, src/corona-board/assets/css/style.css */
option {
    color: #333; }

/* line 11, src/assets/css/style.scss */
/* line 1059, src/corona-board/assets/css/style.css */
button {
    font: 14px/1 'Nanumsquare'; }

/* line 15, src/assets/css/style.scss */
/* line 1063, src/corona-board/assets/css/style.css */
input[type="time"],
.selectbox select {
    height: 34px; }

/* line 20, src/assets/css/style.scss */
/* line 1068, src/corona-board/assets/css/style.css */
.modal {
    max-width: 450px;
    padding: 2rem 1rem 1rem; }

/* line 24, src/assets/css/style.scss */
/* line 1072, src/corona-board/assets/css/style.css */
.modal header {
    align-items: normal !important; }

/* line 27, src/assets/css/style.scss */
/* line 1075, src/corona-board/assets/css/style.css */
.modal header .search {
    margin: 1rem 0;
    display: flex; }

/* line 31, src/assets/css/style.scss */
/* line 1079, src/corona-board/assets/css/style.css */
.modal header .search input {
    flex: 1 1 auto;
    margin-right: .5rem; }

/* line 38, src/assets/css/style.scss */
/* line 1083, src/corona-board/assets/css/style.css */
.modal .table {
    overflow-y: auto; }

/* line 41, src/assets/css/style.scss */
/* line 1086, src/corona-board/assets/css/style.css */
.modal .table .row {
    padding: .25rem 0;
    margin: 0;
    border-radius: .25rem;
    transition: background-color .2s;
    cursor: pointer; }

/* line 48, src/assets/css/style.scss */
/* line 1093, src/corona-board/assets/css/style.css */
.modal .table .row:hover {
    background-color: #EEE; }

/* line 52, src/assets/css/style.scss */
/* line 1096, src/corona-board/assets/css/style.css */
.modal .table .row li {
    padding: .25rem 0; }

/* line 58, src/assets/css/style.scss */
/* line 1099, src/corona-board/assets/css/style.css */
.modal.modal-csv-upload {
    justify-content: space-between;
    max-height: 200px; }

/* line 62, src/assets/css/style.scss */
/* line 1103, src/corona-board/assets/css/style.css */
.modal.modal-csv-upload > button {
    align-self: flex-end; }

/* line 69, src/assets/css/style.scss */
/* line 1106, src/corona-board/assets/css/style.css */
.modal.modal-researchID .search {
    display: flex; }

/* line 72, src/assets/css/style.scss */
/* line 1109, src/corona-board/assets/css/style.css */
.modal.modal-researchID .search input {
    border: 1px solid #EEE;
    flex: 1 1 auto;
    margin-right: .5rem; }

/* line 79, src/assets/css/style.scss */
/* line 1114, src/corona-board/assets/css/style.css */
.modal.modal-researchID .row li {
    flex: 1 1 25%; }

/* line 85, src/assets/css/style.scss */
/* line 1118, src/corona-board/assets/css/style.css */
.container {
    background-size: 200%;
    background: #313b4b;
    transition: 600ms ease; }

/* line 91, src/assets/css/style.scss */
/* line 1124, src/corona-board/assets/css/style.css */
.row {
    display: flex;
    width: 100%;
    flex: 1 1 auto;
    align-items: center;
    padding: .4rem .8rem;
    background-color: white;
    margin-bottom: .5rem;
    border-radius: .5rem;
    text-transform: capitalize;
    position: relative; }

/* line 103, src/assets/css/style.scss */
/* line 1136, src/corona-board/assets/css/style.css */
.row.row-type-1 input {
    width: 100% !important; }

/* line 109, src/assets/css/style.scss */
/* line 1139, src/corona-board/assets/css/style.css */
.row.row-type-2 .column:first-of-type {
    flex: 0 0 320px; }

/* line 112, src/assets/css/style.scss */
/* line 1142, src/corona-board/assets/css/style.css */
.row.row-type-2 .column:first-of-type input {
    width: 180px; }

/* line 117, src/assets/css/style.scss */
/* line 1145, src/corona-board/assets/css/style.css */
.row.row-type-2 .column:last-of-type {
    flex: 1 1 auto; }

/* line 120, src/assets/css/style.scss */
/* line 1148, src/corona-board/assets/css/style.css */
.row.row-type-2 .column:last-of-type input {
    width: 100%; }

/* line 127, src/assets/css/style.scss */
/* line 1151, src/corona-board/assets/css/style.css */
.row.row-type-3 .column {
    flex: 1 1 33.333% !important; }

/* line 133, src/assets/css/style.scss */
/* line 1154, src/corona-board/assets/css/style.css */
.row.row-type-4 .column {
    flex: 1 1 25% !important; }

/* line 136, src/assets/css/style.scss */
/* line 1157, src/corona-board/assets/css/style.css */
.row.row-type-4 .column .input-select {
    flex-wrap: nowrap; }

/* line 145, src/assets/css/style.scss */
/* line 1160, src/corona-board/assets/css/style.css */
.row.row-date .column:first-of-type {
    flex: 0 0 420px; }

/* line 150, src/assets/css/style.scss */
/* line 1163, src/corona-board/assets/css/style.css */
.row.row-date .selectbox {
    flex: 0 0 80px; }

/* line 155, src/assets/css/style.scss */
/* line 1166, src/corona-board/assets/css/style.css */
.row .input-title {
    flex: 0 0 120px;
    position: relative; }

/* line 159, src/assets/css/style.scss */
/* line 1170, src/corona-board/assets/css/style.css */
.row .input-title.required::before {
    content: "\002A";
    color: orangered;
    position: absolute;
    left: -.6rem;
    font-size: 1.2rem; }

/* line 168, src/assets/css/style.scss */
/* line 1177, src/corona-board/assets/css/style.css */
.row input[type="text"],
.row input[type="password"] {
    min-width: 80px;
    width: 180px; }

/* line 173, src/assets/css/style.scss */
/* line 1182, src/corona-board/assets/css/style.css */
.row input[type="text"] + *,
.row input[type="password"] + * {
    margin-left: .5rem; }

/* line 178, src/assets/css/style.scss */
/* line 1186, src/corona-board/assets/css/style.css */
.row .selectbox + .selectbox {
    margin-left: .5rem; }

/* line 182, src/assets/css/style.scss */
/* line 1189, src/corona-board/assets/css/style.css */
.row .column {
    flex: 0 0 auto;
    display: flex;
    align-items: center; }

/* line 187, src/assets/css/style.scss */
/* line 1194, src/corona-board/assets/css/style.css */
.row .column:first-of-type {
    flex: 1 1 auto; }

/* line 190, src/assets/css/style.scss */
/* line 1197, src/corona-board/assets/css/style.css */
.row .column:first-of-type .input-title {
    flex: 0 0 120px !important;
    margin-right: 0; }

/* line 202, src/assets/css/style.scss */
/* line 1201, src/corona-board/assets/css/style.css */
.row .column:not(:last-of-type) {
    margin-right: 1rem; }

/* line 206, src/assets/css/style.scss */
/* line 1204, src/corona-board/assets/css/style.css */
.row .column .input-title {
    flex: 0 0 auto !important;
    margin-right: .5rem; }

/* line 215, src/assets/css/style.scss */
/* line 1209, src/corona-board/assets/css/style.css */
.table .row:last-of-type {
    margin-bottom: 0; }

/* line 220, src/assets/css/style.scss */
/* line 1213, src/corona-board/assets/css/style.css */
.table span {
    width: 1.8rem;
    height: 1.8rem;
    display: flex;
    border-radius: 50%; }

/* line 227, src/assets/css/style.scss */
/* line 1220, src/corona-board/assets/css/style.css */
.table .btn-edit,
.table .btn-plus,
.table .btn-more {
    background-color: transparent;
    width: 1.5rem;
    height: 1.5rem;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: .2rem;
    transition: background-color .2s; }

/* line 240, src/assets/css/style.scss */
/* line 1233, src/corona-board/assets/css/style.css */
.table .btn-edit:hover,
.table .btn-plus:hover,
.table .btn-more:hover {
    background-color: #EEE; }

/* line 243, src/assets/css/style.scss */
/* line 1238, src/corona-board/assets/css/style.css */
.table .btn-edit:hover svg,
.table .btn-plus:hover svg,
.table .btn-more:hover svg {
    fill: #07babd; }

/* line 248, src/assets/css/style.scss */
/* line 1243, src/corona-board/assets/css/style.css */
.table .btn-edit svg,
.table .btn-plus svg,
.table .btn-more svg {
    fill: #566d80; }

/* line 255, src/assets/css/style.scss */
/* line 1249, src/corona-board/assets/css/style.css */
aside {
    flex-basis: 220px;
    display: flex;
    align-items: center;
    background: #313b4b; }

/* line 261, src/assets/css/style.scss */
/* line 1255, src/corona-board/assets/css/style.css */
aside button {
    font-family: 'Poppins', sans-serif; }

/* line 265, src/assets/css/style.scss */
/* line 1258, src/corona-board/assets/css/style.css */
aside .btn-login {
    display: flex;
    justify-content: center;
    background: transparent;
    padding: .3rem;
    text-transform: capitalize;
    color: rgba(255, 255, 255, 0.7);
    border: 1px solid rgba(255, 255, 255, 0.3);
    transition: color .2s; }

/* line 275, src/assets/css/style.scss */
/* line 1268, src/corona-board/assets/css/style.css */
aside .btn-login:hover {
    color: white; }

/* line 280, src/assets/css/style.scss */
/* line 1271, src/corona-board/assets/css/style.css */
aside .buttons {
    position: absolute;
    bottom: 1.5rem;
    display: flex;
    align-items: center; }

/* line 286, src/assets/css/style.scss */
/* line 1277, src/corona-board/assets/css/style.css */
aside .buttons button {
    color: white;
    background-color: transparent;
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: background-color .2s; }

/* line 292, src/assets/css/style.scss */
/* line 1283, src/corona-board/assets/css/style.css */
aside .buttons button:hover, aside .buttons button.active {
    background-color: white;
    color: #333; }

/* line 298, src/assets/css/style.scss */
/* line 1287, src/corona-board/assets/css/style.css */
aside .buttons button svg {
    fill: #07babd;
    margin-right: .2rem; }

/* line 310, src/assets/css/style.scss */
/* line 1291, src/corona-board/assets/css/style.css */
aside header {
    min-height: 145px;
    flex-direction: column; }

/* line 314, src/assets/css/style.scss */
/* line 1295, src/corona-board/assets/css/style.css */
aside header .logo {
    display: flex;
    justify-content: center;
    font-weight: bold;
    margin: 1.5rem auto 0;
    font-size: 1.2rem;
    background: url("../images/logo_multi.png") no-repeat center;
    background-size: contain;
    width: 4rem;
    height: 4rem;
    cursor: pointer; }

/* line 327, src/assets/css/style.scss */
/* line 1307, src/corona-board/assets/css/style.css */
aside header .id {
    color: #EEE;
    line-height: 1; }

/* line 333, src/assets/css/style.scss */
/* line 1311, src/corona-board/assets/css/style.css */
aside .menu {
    width: 100%;
    display: flex;
    flex-direction: column;
    margin-top: 1.5rem; }

/* line 339, src/assets/css/style.scss */
/* line 1317, src/corona-board/assets/css/style.css */
aside .menu small {
    color: #a5ccdc;
    padding: .3rem .8rem;
    font-family: 'NanumSquare', sans-serif;
    font-size: 13px; }

/* line 346, src/assets/css/style.scss */
/* line 1323, src/corona-board/assets/css/style.css */
aside .menu ul {
    margin-bottom: 2rem; }

/* line 350, src/assets/css/style.scss */
/* line 1326, src/corona-board/assets/css/style.css */
aside .menu li {
    display: flex;
    flex: 1 1 auto;
    width: 100%; }

/* line 356, src/assets/css/style.scss */
/* line 1331, src/corona-board/assets/css/style.css */
aside .menu a {
    position: relative;
    color: rgba(255, 255, 255, 0.6);
    display: flex;
    align-items: center;
    width: 100%;
    padding: .3rem;
    transition: background-color .2s; }

/* line 365, src/assets/css/style.scss */
/* line 1340, src/corona-board/assets/css/style.css */
aside .menu a:hover, aside .menu a.active {
    color: white;
    background-color: rgba(255, 255, 255, 0.1); }

/* line 370, src/assets/css/style.scss */
/* line 1344, src/corona-board/assets/css/style.css */
aside .menu a:hover > *:first-child, aside .menu a.active > *:first-child {
    fill: #07babd !important; }

/* line 375, src/assets/css/style.scss */
/* line 1347, src/corona-board/assets/css/style.css */
aside .menu a > *:first-child {
    fill: #aaacbf;
    padding: .5rem;
    box-sizing: content-box;
    border-radius: .3rem;
    transition: .2s all; }

/* line 383, src/assets/css/style.scss */
/* line 1354, src/corona-board/assets/css/style.css */
aside .menu a > *:last-child {
    position: absolute;
    right: .5rem;
    fill: rgba(255, 255, 255, 0.8);
    margin-right: .2rem; }

/* line 393, src/assets/css/style.scss */
/* line 1361, src/corona-board/assets/css/style.css */
main {
    flex-direction: column;
    background: #edf1f9;
    border-radius: 1rem 0 0 1rem; }

/* line 398, src/assets/css/style.scss */
/* line 1366, src/corona-board/assets/css/style.css */
main > header {
    padding: 1.3rem 1rem 1rem; }

/* line 401, src/assets/css/style.scss */
/* line 1369, src/corona-board/assets/css/style.css */
main > header h3 {
    line-height: 36px; }

/* line 404, src/assets/css/style.scss */
/* line 1372, src/corona-board/assets/css/style.css */
main > header h3 small {
    border: 1px solid #ddd;
    padding: .3rem .6rem;
    border-radius: .3rem;
    margin-left: .5rem; }

/* line 414, src/assets/css/style.scss */
/* line 1379, src/corona-board/assets/css/style.css */
.sub-menu {
    flex: 1 1 auto;
    text-align: center;
    background: white;
    padding: 0 .15rem;
    border-radius: .3rem; }

/* line 421, src/assets/css/style.scss */
/* line 1386, src/corona-board/assets/css/style.css */
.sub-menu li {
    flex: 1 1 auto;
    margin: .3rem .15rem;
    padding: .5rem;
    justify-content: center;
    border-radius: .2rem;
    transition: background-color .2s;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none; }

/* line 431, src/assets/css/style.scss */
/* line 1399, src/corona-board/assets/css/style.css */
.sub-menu li:hover, .sub-menu li.active {
    background-color: #07babd;
    color: white; }

/* line 439, src/assets/css/style.scss */
/* line 1404, src/corona-board/assets/css/style.css */
section {
    padding: 0 1rem 1rem 1rem;
    align-items: center;
    overflow-x: hidden;
    overflow-y: auto;
    flex-direction: column;
    -webkit-animation: fadeInOpacity .4s forwards;
    animation: fadeInOpacity .4s forwards;
    transition: display .2s; }

/* line 449, src/assets/css/style.scss */
/* line 1415, src/corona-board/assets/css/style.css */
.count {
    flex: 1 1 50%;
    border-radius: .3rem;
    padding: .5rem .5rem .5rem 1rem;
    margin: .25rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: white;
    transition: background-color .2s; }

/* line 460, src/assets/css/style.scss */
/* line 1426, src/corona-board/assets/css/style.css */
.count-current {
    background-color: rgba(49, 59, 75, 0.3); }

/* line 464, src/assets/css/style.scss */
/* line 1429, src/corona-board/assets/css/style.css */
.count-all {
    background-color: rgba(49, 59, 75, 0.9); }

/* line 468, src/assets/css/style.scss */
/* line 1432, src/corona-board/assets/css/style.css */
.count h1 {
    color: white;
    min-width: 2rem;
    height: 2rem;
    padding: 0 .5rem;
    border-radius: .3rem;
    display: flex;
    align-items: center;
    justify-content: center; }

/* line 479, src/assets/css/style.scss */
/* line 1442, src/corona-board/assets/css/style.css */
.count small {
    color: white; }

/* line 484, src/assets/css/style.scss */
/* line 1446, src/corona-board/assets/css/style.css */
.chart-container {
    /*height: 30vh;
  max-height: 250px;*/
    background-color: white;
    flex: 1 1 auto;
    display: flex;
    border-radius: .3rem;
    margin: .25rem; }

/* line 493, src/assets/css/style.scss */
/* line 1455, src/corona-board/assets/css/style.css */
.chart-container .chart {
    flex: 1;
    position: relative;
    border-radius: .3rem; }

/* line 498, src/assets/css/style.scss */
/* line 1460, src/corona-board/assets/css/style.css */
.chart-container .chart [dir="ltr"] {
    width: 100% !important;
    height: 100% !important; }

/* ============================================================
   Main
   ============================================================ */
/* line 512, src/assets/css/style.scss */
/* line 1468, src/corona-board/assets/css/style.css */
main[class*="dashboard"] section {
    display: flex;
    flex: 1 1 auto; }

/* line 518, src/assets/css/style.scss */
/* line 1473, src/corona-board/assets/css/style.css */
main[class*="dashboard"] .row {
    background-color: transparent;
    padding: 0;
    align-items: normal;
    margin: 0 -.5rem; }

/* line 524, src/assets/css/style.scss */
/* line 1479, src/corona-board/assets/css/style.css */
main[class*="dashboard"] .row:nth-of-type(1) {
    flex: 0 0 auto; }

/* line 534, src/assets/css/style.scss */
/* line 1483, src/corona-board/assets/css/style.css */
main[class*="list"] .btn-plus-text {
    padding: 0.25rem;
    color: #333; }

/* line 538, src/assets/css/style.scss */
/* line 1487, src/corona-board/assets/css/style.css */
main[class*="list"] .btn-plus-text svg {
    fill: #07babd !important; }

/* line 543, src/assets/css/style.scss */
/* line 1491, src/corona-board/assets/css/style.css */
main[class*="list"] .col-buttons button {
    margin: 0; }

/* line 547, src/assets/css/style.scss */
/* line 1495, src/corona-board/assets/css/style.css */
main[class*="list"] .row {
    cursor: pointer; }

/* line 552, src/assets/css/style.scss */
/* line 1499, src/corona-board/assets/css/style.css */
main[class*="list"] .loader {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 100; }

/* line 560, src/assets/css/style.scss */
/* line 1507, src/corona-board/assets/css/style.css */
main[class*="list"] .loader svg path,
main[class*="list"] .loader svg rect {
    fill: #3b9cff; }

/* line 566, src/assets/css/style.scss */
/* line 1511, src/corona-board/assets/css/style.css */
main[class*="list"] .loader.active {
    display: flex; }

/* line 569, src/assets/css/style.scss */
/* line 1514, src/corona-board/assets/css/style.css */
main[class*="list"] .loader.active + .modal {
    opacity: .6 !important; }

/* line 578, src/assets/css/style.scss */
/* line 1518, src/corona-board/assets/css/style.css */
main[class*="add"] header, main[class*="edit"] header {
    flex-direction: row;
    align-items: center;
    justify-content: space-between; }

/* line 585, src/assets/css/style.scss */
/* line 1524, src/corona-board/assets/css/style.css */
main[class*="add"] ㅎ
.row .btn-plus, main[class*="edit"] ㅎ
.row .btn-plus {
    padding: 0;
    background: transparent;
    position: absolute;
    right: 1rem;
    transition: background-color .2s; }

/* line 592, src/assets/css/style.scss */
/* line 1533, src/corona-board/assets/css/style.css */
main[class*="add"] ㅎ
.row .btn-plus:hover, main[class*="edit"] ㅎ
.row .btn-plus:hover {
    background-color: #EEE; }

/* line 596, src/assets/css/style.scss */
/* line 1538, src/corona-board/assets/css/style.css */
main[class*="add"] ㅎ
.row .btn-plus svg, main[class*="edit"] ㅎ
.row .btn-plus svg {
    fill: slategray; }

/* line 602, src/assets/css/style.scss */
/* line 1544, src/corona-board/assets/css/style.css */
main[class*="add"] .input-title, main[class*="edit"] .input-title {
    flex: 0 0 120px;
    color: slategray;
    word-break: keep-all; }

/* line 608, src/assets/css/style.scss */
/* line 1550, src/corona-board/assets/css/style.css */
main[class*="add"] input[type="text"],
main[class*="add"] input[type="number"],
main[class*="add"] input[type="time"], main[class*="edit"] input[type="text"],
main[class*="edit"] input[type="number"],
main[class*="edit"] input[type="time"] {
    border: 1px solid #EEE; }

/* line 614, src/assets/css/style.scss */
/* line 1558, src/corona-board/assets/css/style.css */
main[class*="add"] input[type="time"], main[class*="edit"] input[type="time"] {
    min-width: 142px; }

/* line 618, src/assets/css/style.scss */
/* line 1562, src/corona-board/assets/css/style.css */
main[class*="add"] .input-select, main[class*="edit"] .input-select {
    flex: 1 1 auto;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    margin-bottom: -.5rem; }

/* line 626, src/assets/css/style.scss */
/* line 1569, src/corona-board/assets/css/style.css */
main[class*="add"] .input-select input[type="radio"]:disabled + label:hover, main[class*="edit"] .input-select input[type="radio"]:disabled + label:hover {
    background-color: #F3F6F9 !important;
    color: slategray; }

/* line 631, src/assets/css/style.scss */
/* line 1573, src/corona-board/assets/css/style.css */
main[class*="add"] .input-select input[type="radio"]:disabled:checked + label, main[class*="edit"] .input-select input[type="radio"]:disabled:checked + label {
    background-color: #A3A6A9 !important; }

/* line 636, src/assets/css/style.scss */
/* line 1577, src/corona-board/assets/css/style.css */
main[class*="add"] input[type="radio"] + label,
main[class*="add"] .select-checkbox input[type="checkbox"] + label, main[class*="edit"] input[type="radio"] + label,
main[class*="edit"] .select-checkbox input[type="checkbox"] + label {
    min-width: 36px;
    display: flex;
    justify-content: center;
    margin-right: .5rem;
    margin-bottom: .5rem;
    border-radius: .3rem;
    background-color: #F3F6F9;
    padding: .3rem .6rem;
    cursor: pointer;
    transition: background-color .2s; }

/* line 649, src/assets/css/style.scss */
/* line 1591, src/corona-board/assets/css/style.css */
main[class*="add"] input[type="radio"] + label::before,
main[class*="add"] .select-checkbox input[type="checkbox"] + label::before, main[class*="edit"] input[type="radio"] + label::before,
main[class*="edit"] .select-checkbox input[type="checkbox"] + label::before {
    content: none; }

/* line 654, src/assets/css/style.scss */
/* line 1597, src/corona-board/assets/css/style.css */
main[class*="add"] input[type="radio"] + label:hover,
main[class*="add"] input[type="radio"]:checked + label,
main[class*="add"] .select-checkbox input[type="checkbox"] + label:hover,
main[class*="add"] .select-checkbox input[type="checkbox"]:checked + label, main[class*="edit"] input[type="radio"] + label:hover,
main[class*="edit"] input[type="radio"]:checked + label,
main[class*="edit"] .select-checkbox input[type="checkbox"] + label:hover,
main[class*="edit"] .select-checkbox input[type="checkbox"]:checked + label {
    background-color: #437ef1 !important;
    color: white;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none; }

/* line 663, src/assets/css/style.scss */
/* line 1612, src/corona-board/assets/css/style.css */
main[class*="add"] .select-checkbox input, main[class*="edit"] .select-checkbox input {
    position: absolute;
    opacity: 0; }

/* line 670, src/assets/css/style.scss */
/* line 1617, src/corona-board/assets/css/style.css */
main header svg {
    fill: white; }

/* ============================================================
   Section
   ============================================================ */
/* line 681, src/assets/css/style.scss */
/* line 1624, src/corona-board/assets/css/style.css */
section > .buttons {
    display: flex;
    flex-direction: row-reverse;
    margin: 0 -.2rem; }

/* line 687, src/assets/css/style.scss */
/* line 1629, src/corona-board/assets/css/style.css */
section > .buttons button {
    margin: 0 .2rem;
    background-color: #07babd; }

/* line 691, src/assets/css/style.scss */
/* line 1633, src/corona-board/assets/css/style.css */
section > .buttons button svg {
    fill: white; }

/* ============================================================
   Patient List
   ============================================================ */
/* line 702, src/assets/css/style.scss */
/* line 1640, src/corona-board/assets/css/style.css */
.filters {
    flex: 0 0 auto;
    display: flex;
    background-color: #4870ac;
    border-radius: .3rem;
    padding: .5rem;
    margin: 0 1rem .5rem 1rem; }

/* line 710, src/assets/css/style.scss */
/* line 1648, src/corona-board/assets/css/style.css */
.filters ul {
    flex: 1 1 auto;
    display: flex;
    margin: 0 .25rem 0 -.25rem; }

/* line 715, src/assets/css/style.scss */
/* line 1653, src/corona-board/assets/css/style.css */
.filters ul li {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    margin: 0 .25rem;
    color: white; }

/* line 723, src/assets/css/style.scss */
/* line 1660, src/corona-board/assets/css/style.css */
.filters ul li.filter-age div {
    display: flex; }

/* line 726, src/assets/css/style.scss */
/* line 1663, src/corona-board/assets/css/style.css */
.filters ul li.filter-age div input {
    width: 30px; }

/* line 732, src/assets/css/style.scss */
/* line 1666, src/corona-board/assets/css/style.css */
.filters ul li label {
    font-size: 12px;
    color: #ddd; }

/* line 737, src/assets/css/style.scss */
/* line 1670, src/corona-board/assets/css/style.css */
.filters ul li input[type="text"] {
    background-color: transparent;
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: white;
    max-width: 90px; }

/* line 745, src/assets/css/style.scss */
/* line 1676, src/corona-board/assets/css/style.css */
.filters ul li .input-select {
    display: flex; }

/* line 751, src/assets/css/style.scss */
/* line 1679, src/corona-board/assets/css/style.css */
.filters ul li .selectbox::before {
    border-color: white; }

/* line 755, src/assets/css/style.scss */
/* line 1682, src/corona-board/assets/css/style.css */
.filters ul li .selectbox select {
    background-color: transparent;
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
    height: 34px; }

/* line 765, src/assets/css/style.scss */
/* line 1688, src/corona-board/assets/css/style.css */
.filters button {
    padding: 0;
    flex: 0 0 52px;
    display: flex;
    justify-content: center;
    align-items: center;
    background: rgba(255, 255, 255, 0.2); }

/* line 773, src/assets/css/style.scss */
/* line 1696, src/corona-board/assets/css/style.css */
.filters button svg {
    fill: white; }

/* line 778, src/assets/css/style.scss */
/* line 1699, src/corona-board/assets/css/style.css */
.filters + small {
    text-align: right;
    margin-right: 1rem;
    margin-bottom: 1rem; }

/* line 787, src/assets/css/style.scss */
/* line 1705, src/corona-board/assets/css/style.css */
.patient_list .table .rows {
    position: relative;
    margin-bottom: .5rem; }

/* line 791, src/assets/css/style.scss */
/* line 1709, src/corona-board/assets/css/style.css */
.patient_list .table .rows .sub-row {
    display: none; }

/* line 795, src/assets/css/style.scss */
/* line 1712, src/corona-board/assets/css/style.css */
.patient_list .table .rows.active {
    flex-direction: column;
    border: 1px solid coral;
    border-radius: .5rem; }

/* line 800, src/assets/css/style.scss */
/* line 1717, src/corona-board/assets/css/style.css */
.patient_list .table .rows.active .row {
    margin-bottom: 0;
    border-radius: .5rem .5rem 0 0; }

/* line 805, src/assets/css/style.scss */
/* line 1721, src/corona-board/assets/css/style.css */
.patient_list .table .rows.active .sub-row {
    display: flex;
    border-top: 1px solid #EEE;
    border-radius: 0; }

/* line 810, src/assets/css/style.scss */
/* line 1726, src/corona-board/assets/css/style.css */
.patient_list .table .rows.active .sub-row:last-of-type {
    border-radius: 0 0 .5rem .5rem; }

/* line 817, src/assets/css/style.scss */
/* line 1730, src/corona-board/assets/css/style.css */
.patient_list .table .row {
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    /*기저질환*/ }

/* line 821, src/assets/css/style.scss */
/* line 1737, src/corona-board/assets/css/style.css */
.patient_list .table .row.th li:nth-of-type(10) {
    display: flex;
    flex-direction: column; }

/* line 825, src/assets/css/style.scss */
/* line 1741, src/corona-board/assets/css/style.css */
.patient_list .table .row.th li:nth-of-type(10) ul {
    justify-content: center; }

/* line 830, src/assets/css/style.scss */
/* line 1744, src/corona-board/assets/css/style.css */
.patient_list .table .row li {
    /*확진번호*/
    /*성별*/
    /*나이*/
    /*확진일자*/
    /*병원*/
    /*중증도*/
    /*중증도 측정일*/
    /*입원일수*/
    /*기저질환*/
    /*상태*/
    /*퇴원(사망)일자*/
    /*퇴원(사망)일자*/
    /*버튼들*/ }

/* line 833, src/assets/css/style.scss */
/* line 1759, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(1) {
    width: 5%; }

/* line 838, src/assets/css/style.scss */
/* line 1762, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(2) {
    width: 5%; }

/* line 843, src/assets/css/style.scss */
/* line 1765, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(3) {
    width: 5%; }

/* line 848, src/assets/css/style.scss */
/* line 1768, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(4) {
    width: 8%; }

/* line 853, src/assets/css/style.scss */
/* line 1771, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(5) {
    width: 7%; }

/* line 858, src/assets/css/style.scss */
/* line 1774, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(6) {
    width: 5%; }

/* line 863, src/assets/css/style.scss */
/* line 1777, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(7) {
    width: 8%; }

/* line 868, src/assets/css/style.scss */
/* line 1780, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(8) {
    width: 5%; }

/* line 873, src/assets/css/style.scss */
/* line 1783, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(9) {
    width: 20%;
    display: block;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis; }

/* line 881, src/assets/css/style.scss */
/* line 1790, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(9) li, .patient_list .table .row li:nth-of-type(9) span {
    flex: 0 0 30px;
    margin: 0; }

/* line 888, src/assets/css/style.scss */
/* line 1794, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(10) {
    width: 8%; }

/* line 893, src/assets/css/style.scss */
/* line 1797, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(11) {
    width: 8%; }

/* line 898, src/assets/css/style.scss */
/* line 1800, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(12) {
    width: 8%; }

/* line 903, src/assets/css/style.scss */
/* line 1803, src/corona-board/assets/css/style.css */
.patient_list .table .row li:nth-of-type(13) {
    width: 8%;
    margin: 0 -.25rem;
    padding: 0 .25rem; }

/* ============================================================
   Patient Add
   ============================================================ */
/* ============================================================
   Clinical Trial Patient Dashboard
   ============================================================ */
/* line 922, src/assets/css/style.scss */
/* line 1815, src/corona-board/assets/css/style.css */
.clinical-trial-patient-dashboard select {
    min-width: 100px; }

/* ============================================================
   Clinical Trial Patient List
   ============================================================ */
/* line 936, src/assets/css/style.scss */
/* line 1822, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .rows {
    position: relative;
    margin-bottom: .5rem; }

/* line 940, src/assets/css/style.scss */
/* line 1826, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .rows .sub-row {
    display: none; }

/* line 944, src/assets/css/style.scss */
/* line 1829, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .rows.active {
    flex-direction: column;
    border-radius: .5rem; }

/* line 948, src/assets/css/style.scss */
/* line 1833, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .rows.active .btn-more svg {
    transform: rotate(180deg); }

/* line 952, src/assets/css/style.scss */
/* line 1836, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .rows.active > .row {
    border-bottom: 3px double #3b9cff; }

/* line 956, src/assets/css/style.scss */
/* line 1839, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .rows.active .row {
    margin-bottom: 0; }

/* line 960, src/assets/css/style.scss */
/* line 1842, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .rows.active .sub-div {
    border-radius: .5rem;
    margin-top: .5rem;
    border: 1px solid coral; }

/* line 966, src/assets/css/style.scss */
/* line 1847, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .rows.active .sub-row {
    display: flex;
    border-top: 1px solid #EEE;
    border-radius: 0; }

/* line 971, src/assets/css/style.scss */
/* line 1852, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .rows.active .sub-row:first-of-type {
    border-radius: .5rem .5rem 0 0; }

/* line 975, src/assets/css/style.scss */
/* line 1855, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .rows.active .sub-row:last-of-type {
    border-radius: 0 0 .5rem .5rem; }

/* line 982, src/assets/css/style.scss */
/* line 1859, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row {
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    /*기저질환*/ }

/* line 986, src/assets/css/style.scss */
/* line 1866, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row.th li:nth-of-type(10) {
    display: flex;
    flex-direction: column; }

/* line 990, src/assets/css/style.scss */
/* line 1870, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row.th li:nth-of-type(10) ul {
    justify-content: center; }

/* line 995, src/assets/css/style.scss */
/* line 1873, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li {
    /*확진번호*/
    /*성별*/
    /*나이*/
    /*확진일자*/
    /*병원*/
    /*중증도*/
    /*중증도 측정일*/
    /*입원일수*/
    /*기저질환*/
    /*참여연구*/
    /*상태*/
    /*퇴원(사망)일자*/
    /*퇴원(사망)일자*/
    /*버튼들*/ }

/* line 998, src/assets/css/style.scss */
/* line 1889, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(1) {
    width: 5%; }

/* line 1003, src/assets/css/style.scss */
/* line 1892, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(2) {
    width: 4%; }

/* line 1008, src/assets/css/style.scss */
/* line 1895, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(3) {
    width: 4%; }

/* line 1013, src/assets/css/style.scss */
/* line 1898, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(4) {
    width: 8%; }

/* line 1018, src/assets/css/style.scss */
/* line 1901, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(5) {
    width: 6%; }

/* line 1023, src/assets/css/style.scss */
/* line 1904, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(6) {
    width: 4%; }

/* line 1028, src/assets/css/style.scss */
/* line 1907, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(7) {
    width: 8%; }

/* line 1033, src/assets/css/style.scss */
/* line 1910, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(8) {
    width: 5%; }

/* line 1038, src/assets/css/style.scss */
/* line 1913, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(9) {
    width: 20%;
    display: block;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis; }

/* line 1046, src/assets/css/style.scss */
/* line 1920, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(9) li, .clinical-trials-list .table .row li:nth-of-type(9) span {
    flex: 0 0 30px;
    margin: 0; }

/* line 1053, src/assets/css/style.scss */
/* line 1924, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(10) {
    width: 5%; }

/* line 1058, src/assets/css/style.scss */
/* line 1927, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(11) {
    width: 7%; }

/* line 1063, src/assets/css/style.scss */
/* line 1930, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(12) {
    width: 8%; }

/* line 1068, src/assets/css/style.scss */
/* line 1933, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(13) {
    width: 8%; }

/* line 1073, src/assets/css/style.scss */
/* line 1936, src/corona-board/assets/css/style.css */
.clinical-trials-list .table .row li:nth-of-type(14) {
    width: 8%;
    margin: 0 -.25rem;
    padding: 0 .25rem; }

/* line 1084, src/assets/css/style.scss */
/* line 1942, src/corona-board/assets/css/style.css */
.clinical-trials-detail {
    display: none;
    flex: 0 0 30vh;
    align-items: flex-start;
    color: white;
    margin-bottom: 1rem;
    padding-bottom: 0; }

/* line 1092, src/assets/css/style.scss */
/* line 1950, src/corona-board/assets/css/style.css */
.clinical-trials-detail-menu {
    display: flex;
    margin: 0 -.1rem; }

/* line 1096, src/assets/css/style.scss */
/* line 1954, src/corona-board/assets/css/style.css */
.clinical-trials-detail-menu a {
    border-radius: .3rem .3rem 0 0;
    color: white;
    padding: .5rem 2rem;
    margin: 0 .1rem;
    background-color: #C3C6C9;
    transition: background-color .2s; }

/* line 1106, src/assets/css/style.scss */
/* line 1962, src/corona-board/assets/css/style.css */
.clinical-trials-detail .table {
    display: none;
    background-color: darksalmon;
    padding: 1rem .5rem;
    transition: .2s;
    margin-bottom: 0; }

/* line 1113, src/assets/css/style.scss */
/* line 1969, src/corona-board/assets/css/style.css */
.clinical-trials-detail .table:target {
    display: flex;
    flex-direction: column;
    border-radius: 0 .5rem .5rem .5rem; }

/* line 1119, src/assets/css/style.scss */
/* line 1974, src/corona-board/assets/css/style.css */
.clinical-trials-detail .table .row {
    background-color: rgba(255, 255, 255, 0.3); }

/* line 1125, src/assets/css/style.scss */
/* line 1978, src/corona-board/assets/css/style.css */
.clinical-trials-detail-menu a:hover,
.clinical-trials-detail-menu .active-patient-menu {
    background-color: darksalmon; }

/* line 1130, src/assets/css/style.scss */
/* line 1983, src/corona-board/assets/css/style.css */
.btn-file {
    position: relative;
    background-color: #3b9cff;
    margin-right: .5rem; }

/* line 1135, src/assets/css/style.scss */
/* line 1988, src/corona-board/assets/css/style.css */
.btn-file::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0; }

/* line 1144, src/assets/css/style.scss */
/* line 1996, src/corona-board/assets/css/style.css */
.btn-file input {
    position: absolute;
    top: 0;
    right: 0;
    margin: 0;
    padding: 0;
    z-index: 10;
    font-size: 20px;
    cursor: pointer;
    height: 36px;
    opacity: 0;
    filter: alpha(opacity=0); }

/* ============================================================
   Clinical Trial Patient Add
   ============================================================ */
/* line 1166, src/assets/css/style.scss */
/* line 2013, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add section h3 {
    margin: 3rem 0 .5rem;
    color: slategray; }

/* line 1172, src/assets/css/style.scss */
/* line 2018, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .rows {
    display: flex;
    margin-bottom: .5rem;
    border-bottom: 2px dotted #DDD; }

/* line 1177, src/assets/css/style.scss */
/* line 2023, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .rows:last-of-type {
    border: 0; }

/* line 1181, src/assets/css/style.scss */
/* line 2026, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .rows .column:first-child {
    flex: 1 1 auto; }

/* line 1185, src/assets/css/style.scss */
/* line 2029, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .rows .btn-minus {
    background-color: transparent;
    border: 1px solid #DDD;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 2.25rem;
    margin-left: .5rem;
    width: 1.8rem;
    height: 1.8rem; }

/* line 1197, src/assets/css/style.scss */
/* line 2041, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .rows .btn-minus svg {
    width: 1.8rem;
    height: 1.8rem;
    fill: slategray; }

/* line 1206, src/assets/css/style.scss */
/* line 2047, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .add-body-measurement {
    background-color: slategray;
    padding: .25rem 1.5rem;
    margin: 0 auto;
    transition: background-color .2s; }

/* line 1212, src/assets/css/style.scss */
/* line 2053, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .add-body-measurement:hover {
    background-color: #3b9cff !important; }

/* line 1216, src/assets/css/style.scss */
/* line 2056, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .add-body-measurement svg {
    fill: white !important; }

/* line 1223, src/assets/css/style.scss */
/* line 2060, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .row input[type="text"] {
    max-width: 160px; }

/* line 1227, src/assets/css/style.scss */
/* line 2064, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .row .column {
    flex: 0 0 50%; }

/* line 1234, src/assets/css/style.scss */
/* line 2067, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .row .column .input-title {
    flex: 0 0 120px !important;
    margin-right: 0;
    position: relative; }

/* line 1243, src/assets/css/style.scss */
/* line 2073, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .table .row {
    background-color: white; }

/* line 1246, src/assets/css/style.scss */
/* line 2076, src/corona-board/assets/css/style.css */
.clinical-trial-patient-add .table .row li {
    flex: 1 1 25%; }

/* ============================================================
   Clinical Trial Research List
   ============================================================ */
/* line 1260, src/assets/css/style.scss */
/* line 2083, src/corona-board/assets/css/style.css */
.clinical-trial-research-list .table li:nth-of-type(1) {
    width: 5%; }

/* line 1264, src/assets/css/style.scss */
/* line 2087, src/corona-board/assets/css/style.css */
.clinical-trial-research-list .table li:nth-of-type(2) {
    width: 10%; }

/* line 1268, src/assets/css/style.scss */
/* line 2091, src/corona-board/assets/css/style.css */
.clinical-trial-research-list .table li:nth-of-type(3) {
    width: 30%; }

/* line 1272, src/assets/css/style.scss */
/* line 2095, src/corona-board/assets/css/style.css */
.clinical-trial-research-list .table li:nth-of-type(4) {
    width: 55%; }

/* ============================================================
   Clinical Trial Research Add
   ============================================================ */
/* line 1285, src/assets/css/style.scss */
/* line 2102, src/corona-board/assets/css/style.css */
.clinical-trial-research-add section h3 {
    margin: 3rem 0 .5rem;
    color: slategray; }

/* line 1295, src/assets/css/style.scss */
/* line 2107, src/corona-board/assets/css/style.css */
.clinical-trial-research-add .row.row-standard .column:first-of-type {
    flex: 0 0 30%; }

/* line 1299, src/assets/css/style.scss */
/* line 2111, src/corona-board/assets/css/style.css */
.clinical-trial-research-add .row.row-standard input {
    width: 5rem; }

/* line 1304, src/assets/css/style.scss */
/* line 2115, src/corona-board/assets/css/style.css */
.clinical-trial-research-add .row select {
    font-family: "Poppins", sans-serif; }

/* ============================================================
   Login
   ============================================================ */
/* line 1314, src/assets/css/style.scss */
/* line 2122, src/corona-board/assets/css/style.css */
.login {
    background: transparent; }

/* line 1317, src/assets/css/style.scss */
/* line 2125, src/corona-board/assets/css/style.css */
.login-container {
    align-self: center;
    margin: 0 auto;
    background: rgba(255, 255, 255, 0.1);
    padding: 2rem;
    border-radius: 1rem;
    width: 30vw;
    max-width: 320px;
    z-index: 10;
    transition: .4s; }

/* line 1329, src/assets/css/style.scss */
/* line 2136, src/corona-board/assets/css/style.css */
.login .logo {
    display: flex;
    justify-content: center;
    font-weight: bold;
    margin: 1rem auto 2rem;
    font-size: 1.2rem;
    background: url("../images/logo_wh.png") no-repeat center;
    background-size: contain;
    width: 6rem;
    height: 6rem;
    opacity: .7; }

/* line 1342, src/assets/css/style.scss */
/* line 2148, src/corona-board/assets/css/style.css */
.login h1 {
    color: white;
    font-family: "Montserrat", sans-serif;
    margin-bottom: .5em;
    text-align: center;
    text-transform: uppercase; }

/* line 1350, src/assets/css/style.scss */
/* line 2155, src/corona-board/assets/css/style.css */
.login div {
    display: flex;
    flex-direction: column;
    position: relative; }

/* line 1356, src/assets/css/style.scss */
/* line 2160, src/corona-board/assets/css/style.css */
.login svg {
    fill: #d8e0eb;
    position: absolute;
    left: .9rem;
    bottom: 2rem;
    z-index: 10; }

/* line 1364, src/assets/css/style.scss */
/* line 2167, src/corona-board/assets/css/style.css */
.login label {
    display: none; }

/* line 1368, src/assets/css/style.scss */
/* line 2170, src/corona-board/assets/css/style.css */
.login input {
    font-family: 'Poppins', sans-serif;
    color: white;
    text-indent: 1.3rem;
    padding: .7rem 1rem;
    margin-bottom: 1rem;
    border-radius: 50px;
    background-color: rgba(255, 255, 255, 0.2); }

/* line 1378, src/assets/css/style.scss */
/* line 2179, src/corona-board/assets/css/style.css */
.login button {
    padding: .7rem 1rem;
    border-radius: 50px;
    width: 100%;
    justify-content: center;
    font-family: "Poppins", sans-serif;
    font-size: 18px;
    transition: background-color .2s; }

/* line 1387, src/assets/css/style.scss */
/* line 2188, src/corona-board/assets/css/style.css */
.login button:hover {
    background-color: #12d7da; }

/* ============================================================
   Admin
   ============================================================ */
/* line 1398, src/assets/css/style.scss */
/* line 2195, src/corona-board/assets/css/style.css */
.admin {
    color: white !important;
    background: #414b5b; }

/* line 1403, src/assets/css/style.scss */
/* line 2199, src/corona-board/assets/css/style.css */
.admin[class*="list"] .buttons button {
    background-color: transparent;
    border: 1px solid rgba(255, 255, 255, 0.3); }

/* line 1408, src/assets/css/style.scss */
/* line 2203, src/corona-board/assets/css/style.css */
.admin[class*="list"] .search {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin: 1rem 0; }

/* line 1414, src/assets/css/style.scss */
/* line 2209, src/corona-board/assets/css/style.css */
.admin[class*="list"] .search input {
    margin: 0 .25rem; }

/* line 1418, src/assets/css/style.scss */
/* line 2212, src/corona-board/assets/css/style.css */
.admin[class*="list"] .search .btn-search {
    background-color: rgba(0, 0, 0, 0.3);
    border-radius: .3rem;
    width: 32px;
    height: 32px;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center; }

/* line 1433, src/assets/css/style.scss */
/* line 2222, src/corona-board/assets/css/style.css */
.admin[class*="list"] .row {
    cursor: pointer;
    transition: background-color .2s; }

/* line 1437, src/assets/css/style.scss */
/* line 2226, src/corona-board/assets/css/style.css */
.admin[class*="list"] .row:hover {
    background-color: #3b9cff; }

/* line 1441, src/assets/css/style.scss */
/* line 2229, src/corona-board/assets/css/style.css */
.admin[class*="list"] .row li:first-of-type {
    width: 5%;
    flex: 0 0 auto; }

/* line 1448, src/assets/css/style.scss */
/* line 2233, src/corona-board/assets/css/style.css */
.admin header {
    flex-direction: row;
    align-items: center; }

/* line 1453, src/assets/css/style.scss */
/* line 2237, src/corona-board/assets/css/style.css */
.admin input, .admin textarea {
    background-color: rgba(255, 255, 255, 0.1);
    color: white; }

/* line 1457, src/assets/css/style.scss */
/* line 2241, src/corona-board/assets/css/style.css */
.admin input::-moz-placeholder, .admin textarea::-moz-placeholder {
    color: #AAA; }

/* line 2243, src/corona-board/assets/css/style.css */
.admin input:-ms-input-placeholder, .admin textarea:-ms-input-placeholder {
    color: #AAA; }

/* line 2245, src/corona-board/assets/css/style.css */
.admin input::-moz-placeholder, .admin textarea::-moz-placeholder {
    color: #AAA; }
.admin input::placeholder, .admin textarea::placeholder {
    color: #AAA; }

/* line 1461, src/assets/css/style.scss */
/* line 2248, src/corona-board/assets/css/style.css */
.admin input[type="text"], .admin input[type="time"], .admin textarea[type="text"], .admin textarea[type="time"] {
    border: 0 !important; }

/* line 1467, src/assets/css/style.scss */
/* line 2251, src/corona-board/assets/css/style.css */
.admin .selectbox select {
    background-color: rgba(255, 255, 255, 0.5);
    border: 0; }

/* line 1472, src/assets/css/style.scss */
/* line 2255, src/corona-board/assets/css/style.css */
.admin a {
    color: rgba(255, 255, 255, 0.7);
    transition: color .2s; }

/* line 1476, src/assets/css/style.scss */
/* line 2259, src/corona-board/assets/css/style.css */
.admin a:hover {
    color: white; }

/* line 1481, src/assets/css/style.scss */
/* line 2262, src/corona-board/assets/css/style.css */
.admin .btn-cancel {
    background-color: rgba(255, 255, 255, 0.1); }

/* line 1485, src/assets/css/style.scss */
/* line 2265, src/corona-board/assets/css/style.css */
.admin svg {
    fill: white; }

/* line 1490, src/assets/css/style.scss */
/* line 2268, src/corona-board/assets/css/style.css */
.admin .table .btn-edit:hover,
.admin .table .btn-plus:hover,
.admin .table .btn-more:hover {
    background-color: rgba(255, 255, 255, 0.2); }

/* line 1496, src/assets/css/style.scss */
/* line 2273, src/corona-board/assets/css/style.css */
.admin .table .btn-edit svg,
.admin .table .btn-plus svg,
.admin .table .btn-more svg {
    fill: rgba(255, 255, 255, 0.7); }

/* line 1503, src/assets/css/style.scss */
/* line 2278, src/corona-board/assets/css/style.css */
.admin .row {
    background-color: rgba(255, 255, 255, 0.1); }

/* line 1506, src/assets/css/style.scss */
/* line 2281, src/corona-board/assets/css/style.css */
.admin .row.th li,
.admin .row .input-title {
    color: #CCC; }

/* line 1513, src/assets/css/style.scss */
/* line 2285, src/corona-board/assets/css/style.css */
.admin input[type="radio"] + label {
    background-color: rgba(255, 255, 255, 0.1) !important; }

/* line 1517, src/assets/css/style.scss */
/* line 2288, src/corona-board/assets/css/style.css */
.admin .input-title,
.admin label {
    color: rgba(255, 255, 255, 0.7); }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
